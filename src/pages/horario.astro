---
import Layout from '../layouts/Layout.astro';

let user = { name: 'Cargando...' };
let error = null;
---

<Layout title="Inicio">
  <div id="error" class="error-message text-white">{error}</div>
  <div class="user-info text-white">
    <h1 id="username">{user.name}</h1>
  </div>

  <div class="filter-container text-black">
    <label for="day-filter" class="text-white"><strong>Elige un día:</strong></label>
    <select id="day-filter">
      <option value="">Todos</option>
      <option value="L">Lunes</option>
      <option value="M">Martes</option>
      <option value="X">Miércoles</option>
      <option value="J">Jueves</option>
      <option value="V">Viernes</option>
    </select>
    <br>
    <button id="apply-filter" class="bg-blue-500 text-white px-4 py-2 mt-2">Aplicar Filtro</button>
    <button id="clear-filter" class="bg-gray-500 text-white px-4 py-2 mt-2">Quitar Filtro</button>
  </div>

  <div id="schedule-container" class="container mx-auto mt-10 text-white"></div>
</Layout>

<script type="module">
  let horariosData = null;
  let userData = null;
  let selectedDay = '';

  async function fetchUserData() {
    const token = sessionStorage.getItem('authToken');
    if (!token) {
      document.getElementById('error').textContent = 'User is not authenticated';
      return;
    }

    try {
      const response = await fetch('http://127.0.0.1:8080/api/horario/user/id', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/json'
        }
      });
      
      if (!response.ok) {
        throw new Error('Failed to fetch user data');
      }

      const data = await response.json();
      horariosData = data.horarios;
      userData = data.user;
      updateDOM(userData, horariosData, selectedDay);
    } catch (err) {
      document.getElementById('error').textContent = err.message;
    }
  }

  function updateDOM(user, horarios, selectedDay) {
    document.getElementById('username').textContent = user.name;

    const scheduleContainer = document.getElementById('schedule-container');
    scheduleContainer.innerHTML = ''; // Limpiar el contenido anterior

    const table = document.createElement('table');
    table.className = 'min-w-full border-collapse border border-gray-200 text-white';

    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    const headers = ['Horas'];
    if (!selectedDay) {
      headers.push('Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes');
    } else {
      headers.push(getDayName(selectedDay));
    }

    headers.forEach(headerText => {
      const th = document.createElement('th');
      th.className = 'border border-gray-200 px-4 py-2';
      th.textContent = headerText;
      headerRow.appendChild(th);
    });
    thead.appendChild(headerRow);
    table.appendChild(thead);

    const tbody = document.createElement('tbody');

    const franjas = horarios.reduce((acc, horario) => {
      const horaDesde = horario.franja.hora_desde;
      const horaHasta = horario.franja.hora_hasta;
      const hora = `${horaDesde} - ${horaHasta}`;
      if (!acc[hora]) {
        acc[hora] = {};
      }
      const aulaDesc = horario.aula?.descripcion || '';
      const grupoDesc = horario.grupo?.descripcion || 'no hay datos';
      acc[hora][horario.dia] = `${aulaDesc}  ${grupoDesc}`;
      return acc;
    }, {});

    Object.keys(franjas).forEach(hora => {
      const row = document.createElement('tr');

      const horaCell = document.createElement('td');
      horaCell.className = 'border border-gray-200 px-4 py-2 text-center';
      const [horaDesde, horaHasta] = hora.split(' - ');
      horaCell.innerHTML = `<div style="display: flex; flex-direction: column; align-items: center;">
                              <span>${horaDesde}</span>
                              <span>-</span>
                              <span>${horaHasta}</span>
                            </div>`;
      row.appendChild(horaCell);

      const days = selectedDay ? [selectedDay] : ['L', 'M', 'X', 'J', 'V'];
      days.forEach(day => {
        const dayCell = document.createElement('td');
        dayCell.className = 'border border-gray-200 px-4 py-2';
        dayCell.textContent = franjas[hora][day] || '';
        row.appendChild(dayCell);
      });

      tbody.appendChild(row);
    });

    table.appendChild(tbody);
    scheduleContainer.appendChild(table);
  }

  function getDayName(day) {
    const dayNames = {
      'L': 'Lunes',
      'M': 'Martes',
      'X': 'Miércoles',
      'J': 'Jueves',
      'V': 'Viernes'
    };
    return dayNames[day] || day;
  }

  document.getElementById('apply-filter').addEventListener('click', () => {
    selectedDay = document.getElementById('day-filter').value;
    if (horariosData && userData) {
      updateDOM(userData, horariosData, selectedDay);
    }
  });

  document.getElementById('clear-filter').addEventListener('click', () => {
    selectedDay = '';
    document.getElementById('day-filter').value = '';
    if (horariosData && userData) {
      updateDOM(userData, horariosData, selectedDay);
    }
  });

  fetchUserData();
</script>
